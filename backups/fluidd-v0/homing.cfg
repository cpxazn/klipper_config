############################################
#             USER VARIABLES
############################################
[gcode_macro _User_Variables]
# For macros/events.cfg START_PRINT macro
variable_klicky:                  True

# Avoid dock area
variable_safe_x:                  20
variable_safe_y:                  15

# Unusable y to avoid accidentally attaching klicky
# Used in macros/events.cfg START_PRINT macro when purging nozzle
variable_unusable_y:              10

# Lift z to safe height
variable_safe_z:                  12

# Speed Settings
variable_dock_speed:              3600
variable_fast_travel_speed:       15000
variable_normal_travel_speed:     8000
variable_slow_travel_speed:       2500
variable_z_lift_speed:            1000

# Dock Location
variable_dockmove_x_engage:                 -1
variable_dockmove_x_disengage:              19  # Distance from the left (X-min)
variable_dockmove_y:                        0   # Distance from the back (Y-max)

# Dock after homing
variable_dock_after_home:         False
variable_dock_after_screws_tilt:  False
variable_dock_after_z_tilt:       False

gcode: # Don't delete this

[z_calibration]
nozzle_xy_position: -5.2,27.5
#   A X, Y coordinate (e.g. 100,100) of the nozzle, clicking on the z endstop.
switch_xy_position: 11,14
#   A X, Y coordinate (e.g. 100,100) of the probe's switch body, clicking on
#   the z endstop.
#switch_xy_offsets: optional when switch_xy_position is used
#   Instead of an absolute position (switch_xy_position), this configuration
#   adds an X, Y offset (e.g. -6,-18) to the nozzle position.
bed_xy_position: 60,60
#   A X, Y coordinate (e.g. 100,100) where the print surface (e.g. the center
#   point) is probed. These coordinates are adjusted by the
#   probe's X and Y offsets. The default is the zero_reference_position which
#   replaces the deprecated relative_reference_index
#   of the configured bed_mesh, if configured. It's possible to change the zero
#   reference position at runtime or use the GCode argument BED_POSITION of CALIBRATE_Z.
#wiggle_xy_offsets: 0,0
#   After probing the nozzle and retracting, move x some distance away and
#   back. Useful to prevent the z endstop pin sticking to the nozzle and
#   being pulled out of the assembly. Can be negative. Defaults to zero to
#   disable it. Can be combined in x and y to move diagonally. Be careful
#   to not move your nozzle out of range!
switch_offset: 0.72
#   The trigger point offset of the used mag-probe switch.
#   A larger value will position the nozzle closer to the bed.
#   This must be determined manually. More on this later
#   in this section..
#offset_margins: -1.0,1.0
#   The minimum and maximum margins allowed for the calculated offset.
#   If the offset is outside these values, it will stop!
#   The margin can be defined as "min,max" e.g. "-0.5,1.5" or by just one
#   value e.g. "1.0" which translates to "-1.0,1.0" (which is also the default).
samples: 4
#   The number of times to probe each point. The probed z-values
#   will be averaged. The default is from the probe's configuration.
#samples_tolerance: default from "probe:samples_tolerance" section
#   The maximum Z distance (in mm) that a sample may differ from other
#   samples. The default is from the probe's configuration.
#samples_tolerance_retries: default from "probe:samples_tolerance_retries" section
#   The number of times to retry if a sample is found that exceeds
#   samples_tolerance. The default is from the probe's configuration.
#samples_result: default from "probe:samples_result" section
#   The calculation method when sampling more than once - either
#   "median" or "average". The default is from the probe's configuration.
safe_z_height: 13
#   The absolute z position in mm to move to before moving to the next
#   position. The default is two times the z_offset from the probe's
#   configuration. The minimum safe z height is 3mm.
#clearance: DEPRECATED - please use safe_z_height instead!
#   The distance in mm to move up before moving to the next
#   position. The default is two times the z_offset from the probe's
#   configuration.
#position_min: default from "stepper_z:position_min" section.
#   Minimum valid distance (in mm) used for probing move. The
#   default is from the Z rail configuration.
speed: 100
#   The moving speed in X and Y. The default is 50 mm/s.
#lift_speed: default from "probe:lift_speed" section
#   Speed (in mm/s) of the Z axis when lifting the probe between
#   samples and clearance moves. The default is from the probe's
#   configuration.
#probing_speed: default from "stepper_z:homing_speed" section.
#   The fast probing speed (in mm/s) used, when probing_first_fast
#   is enabled. The default is from the Z rail configuration.
#probing_second_speed: default from "stepper_z:second_homing_speed" section.
#   The slower speed (in mm/s) for probing the recorded samples.
#   The default is second_homing_speed of the Z rail configuration.
#probing_retract_dist: default from "stepper_z:homing_retract_dist" section.
#   Distance to retract (in mm) before probing the next sample.
#   The default is homing_retract_dist from the Z rail configuration.
probing_first_fast: false
#   If true, the first probing will be faster by the probing speed.
#   This is to get down faster and not record the result as a
#   probing sample. The default is false.
start_gcode: Attach_Probe
#   A list of G-Code commands to run before each calibration command.
#   See docs/Command_Templates.md for the G-Code format. This can be used to
#   attach the probe.
before_switch_gcode:
#   A list of G-Code commands to run before to each probing on the
#   mag-probe. See docs/Command_Templates.md for the G-Code format. This can
#   be used to attach the probe after probing on the nozzle and before probing
#   on the mag-probe.
end_gcode:
#   A list of G-Code commands to run after each calibration command.
#   See docs/Command_Templates.md for the G-Code format. This can be used to
#   detach the probe afterwards.

############################################
#             HOMING OVERRIDE
############################################
[homing_override]
set_position_z:0
gcode:
  {% set dock_after_home = printer["gcode_macro _User_Variables"].dock_after_home|default(False) %}
  {% set safe_z = printer["gcode_macro _User_Variables"].safe_z|default(10) %}
  {% set safe_y = printer["gcode_macro _User_Variables"].safe_y|default(30) %}
  {% set z_lift_speed = printer["gcode_macro _User_Variables"].z_lift_speed|default(1000) %}
  {% set slow_travel_speed = printer["gcode_macro _User_Variables"].slow_travel_speed|default(2000) %}
  {% set fast_travel_speed = printer["gcode_macro _User_Variables"].fast_travel_speed|default(6000) %}
  M80
  SET_KINEMATIC_POSITION Z=0
  G90
  G1 Z{safe_z} F{z_lift_speed}
  SENSORLESS_DELAY
  G28 X
  G28 Y
  DOCK_PROBE
  G1 X{ printer.toolhead.axis_maximum.x - 15 } Y{ printer.toolhead.axis_maximum.y - 40} F{fast_travel_speed}
  SENSORLESS_DELAY
  G28 X
  G28 Y
  G1 X{ printer.toolhead.axis_maximum.x - 15 } Y{ printer.toolhead.axis_maximum.y - 40} F{slow_travel_speed}
  SENSORLESS_DELAY
  G28 X
  Z_ENDSTOP
  #Attach_Probe
  #SENSORLESS_HOME_Z
  #last_z_result
  #{% if dock_after_home %}
  #  Dock_Probe
  #{% endif %}
axes: xyz

############################################
#              ATTACH PROBE
############################################
[gcode_macro Attach_Probe]
description: Attaches Klicky Probe
gcode:
    SAVE_GCODE_STATE NAME=Saved_state
    G90
    QUERY_ENDSTOPS
    Attach_Probe_Sub
    QUERY_PROBE
    Attach_Probe_Verify
    RESTORE_GCODE_STATE NAME=Saved_state
    


[gcode_macro TEST_QUERY]
gcode:
    M118 {printer.probe.last_query}

[gcode_macro Attach_Probe_Sub]
gcode:
    {% set probe_attached = printer.save_variables.variables.probe_attached %}
    {% set safe_x = printer["gcode_macro _User_Variables"].safe_x|default(30) %}
    {% set safe_y = printer["gcode_macro _User_Variables"].safe_y|default(30) %}
    {% set safe_z = printer["gcode_macro _User_Variables"].safe_z|default(10) %}
    {% set dockmove_x_engage = printer["gcode_macro _User_Variables"].dockmove_x_engage|default(2) %}
    {% set dockmove_x_disengage = printer["gcode_macro _User_Variables"].dockmove_x_disengage|default(2) %}
    {% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(2) %}
    {% set dock_speed = printer["gcode_macro _User_Variables"].dock_speed|default(1000) %}
    {% set fast_travel_speed = printer["gcode_macro _User_Variables"].fast_travel_speed|default(6000) %}
    {% set slow_travel_speed = printer["gcode_macro _User_Variables"].slow_travel_speed|default(2000) %}
    {% set z_lift_speed = printer["gcode_macro _User_Variables"].z_lift_speed|default(1000) %}

    # Check if xy homed
    {% if not 'xy' in printer.toolhead.homed_axes %}
      { action_raise_error("Must Home X and Y Axis First!") }
      _KlickyDebug msg="Attach_Probe Axis not homed"
    # NOT probe_attached and query shows TRIGGERED
    {% elif probe_attached == 0 and printer.probe.last_query %}
      _KlickyDebug msg="Attach_Probe going to attach probe"
      
      # Move up to a safe spot if needed (X,Y)
      {% if printer.toolhead.position.x < safe_x and printer.toolhead.position.y > (printer.toolhead.axis_maximum.y - safe_y) %}
        _KlickyDebug msg="Attach_Probe Moving to safe area"
        G1 Y{printer.toolhead.axis_maximum.y - safe_y} F{slow_travel_speed}
      {% endif %}
      # Lift up to a safe spot if needed (Z)
      {% if printer.toolhead.position.z < safe_z and 'z' in printer.toolhead.homed_axes %}
        G1 Z{safe_z} F{z_lift_speed}
      {% endif %}

      # Move into position before attaching
      _KlickyDebug msg="Attach_Probe Moving into position"
      G1 X{dockmove_x_engage} Y{printer.toolhead.axis_maximum.y - safe_y} F{fast_travel_speed}

      # Move to attach
      _KlickyDebug msg="Attach_Probe Moving to attach"
      G1 Y{printer.toolhead.axis_maximum.y - dockmove_y} F{dock_speed}

      # Back off X
      _KlickyDebug msg="Attach_Probe Backing Away X"
      G1 X{dockmove_x_disengage} F{dock_speed}

      # Back off Y
      _KlickyDebug msg="Attach_Probe Backing Away Y"
      G1 Y{printer.toolhead.axis_maximum.y - safe_y} F{dock_speed}

    # NOT probe_attached but query shows OPEN
    {% elif probe_attached == 0 and not printer.probe.last_query %}
        _KlickyDebug msg="Attach_Probe Variable shows not attached, but endstop query shows otherwise"
        { action_raise_error("Variable shows not attached, but endstop query shows otherwise") }
    # probe_attached but query shows TRIGGERED
    {% elif probe_attached == 1 and printer.probe.last_query %}
        _KlickyDebug msg="Attach_Probe Variable shows not attached, but endstop query shows TRIGGERED"
        { action_raise_error("Variable shows not attached, but endstop query shows TRIGGERED") }
    # probe_attached and query shows OPEN
    {% elif probe_attached == 1 and not printer.probe.last_query %}
      _KlickyDebug msg="Attach_Probe Already attached"
    {% endif %}
[gcode_macro Attach_Probe_Verify]
gcode:
    # Verify probe got attached
    {% if not printer.probe.last_query %}
      _KlickyDebug msg="Attach_Probe Successfully attached"
      SAVE_VARIABLE VARIABLE=probe_attached VALUE=1
    {% else %}
      _KlickyDebug msg="Attach_Probe ERROR Endstop status showing triggered after attach"
      { action_raise_error("Endstop status showing triggered after attach") }
    {% endif %}


############################################
#              DOCK PROBE
############################################
[gcode_macro Dock_Probe]
description: Docks Klicky Probe
gcode:
    SAVE_GCODE_STATE NAME=Saved_state
    G90
    QUERY_PROBE
    Dock_Probe_Sub
    QUERY_PROBE
    Dock_Probe_Verify
    RESTORE_GCODE_STATE NAME=Saved_state
    
[gcode_macro Dock_Probe_Sub]
description: Docks Klicky Probe
gcode:
    {% set probe_attached = printer.save_variables.variables.probe_attached %}
    {% set safe_x = printer["gcode_macro _User_Variables"].safe_x|default(30) %}
    {% set safe_y = printer["gcode_macro _User_Variables"].safe_y|default(30) %}
    {% set safe_z = printer["gcode_macro _User_Variables"].safe_z|default(10) %}
    {% set unusable_y = printer["gcode_macro _User_Variables"].unusable_y|default(20) %}
    {% set dockmove_x_engage = printer["gcode_macro _User_Variables"].dockmove_x_engage|default(2) %}
    {% set dockmove_x_disengage = printer["gcode_macro _User_Variables"].dockmove_x_disengage|default(2) %}
    {% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(2) %}
    {% set dock_speed = printer["gcode_macro _User_Variables"].dock_speed|default(1000) %}
    {% set fast_travel_speed = printer["gcode_macro _User_Variables"].fast_travel_speed|default(6000) %}
    {% set slow_travel_speed = printer["gcode_macro _User_Variables"].slow_travel_speed|default(2000) %}
    {% set z_lift_speed = printer["gcode_macro _User_Variables"].z_lift_speed|default(1000) %}

    SAVE_GCODE_STATE NAME=Saved_state
    # Check if xy homed
    {% if not 'xy' in printer.toolhead.homed_axes %}
      { action_raise_error("Must Home X and Y Axis First!") }
      _KlickyDebug msg="Dock_Probe Axis not homed"
    # probe_attached and query shows OPEN
    {% elif probe_attached == 1 and not printer.probe.last_query %}
      _KlickyDebug msg="Dock_Probe going to dock probe"
      
      # Move up to a safe spot if needed
      {% if printer.toolhead.position.x < safe_x and printer.toolhead.position.y > (printer.toolhead.axis_maximum.y - safe_y) %}
        _KlickyDebug msg="Dock_Probe Moving to safe area"
        G1 Y{printer.toolhead.axis_maximum.y - safe_y} F{slow_travel_speed}
      {% endif %}
      # Lift up to a safe spot if needed (Z)
      {% if printer.toolhead.position.z < safe_z and 'z' in printer.toolhead.homed_axes %}
        G1 Z{safe_z} F{z_lift_speed}
      {% endif %}

      # Move into position before attaching
      _KlickyDebug msg="Dock_Probe Moving into position"
      G1 X{dockmove_x_disengage} Y{printer.toolhead.axis_maximum.y - safe_y} F{fast_travel_speed}

      _KlickyDebug msg="Dock_Probe Moving into position 2"
      G1 Y{printer.toolhead.axis_maximum.y - dockmove_y} F{fast_travel_speed}

      # Move to dock
      _KlickyDebug msg="Dock_Probe Moving to dettach"
      G1 X{dockmove_x_engage} F{dock_speed}

      # Swipe off
      _KlickyDebug msg="Dock_Probe Swipe off"
      G1 Y{printer.toolhead.axis_maximum.y - safe_y} F{dock_speed * 2}

    # probe_attached but query shows TRIGGERED
    {% elif probe_attached == 1 and printer.probe.last_query %}
        _KlickyDebug msg="Dock_Probe Variable shows attached, but endstop query shows otherwise"
        { action_raise_error("Variable shows attached, but endstop query shows otherwise") }
    # NOT probe_attached but query shows OPEN
    {% elif probe_attached == 0 and not printer.probe.last_query %}
        _KlickyDebug msg="Dock_Probe Variable shows not attached, but endstop query shows OPEN"
        { action_raise_error("Variable shows not attached, but endstop query shows OPEN") }
    # NOT probe_attached and query shows TRIGGERED
    {% elif probe_attached == 0 and printer.probe.last_query %}
      _KlickyDebug msg="Dock_Probe Already docked"
    {% endif %}
    RESTORE_GCODE_STATE NAME=Saved_state

[gcode_macro Dock_Probe_Verify]
gcode:
    # Verify probe got docked
    {% if printer.probe.last_query %}
      _KlickyDebug msg="Dock_Probe Successfully docked"
      SAVE_VARIABLE VARIABLE=probe_attached VALUE=0
    {% else %}
      _KlickyDebug msg="Dock_Probe ERROR Endstop status showing open after dock"
      { action_raise_error("Endstop status showing open after dock") }
    {% endif %}

############################################
#              BED MESH
############################################
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
description: Perform Mesh Bed Leveling with klicky
gcode:
    _KlickyDebug msg="BED_MESH_CALIBRATE"
	  G90
    Attach_Probe
    _BED_MESH_CALIBRATE 
    Dock_Probe

#############################################
#             SCREWS TILT
#############################################
#[gcode_macro SCREWS_TILT_CALCULATE]
# rename_existing: _SCREWS_TILT_CALCULATE
# description: 
# gcode:
#     {% set dock_after_screws_tilt = printer["gcode_macro _User_Variables"].dock_after_screws_tilt|default(False) %}

#     _KlickyDebug msg="SCREWS_TILT_CALCULATE"
#     Attach_Probe
#     _SCREWS_TILT_CALCULATE
#     {% if dock_after_screws_tilt %}
#       Dock_Probe
#     {% endif %}

#############################################
#             Z TILT ADJUST
#############################################
[gcode_macro Z_TILT_ADJUST]
rename_existing: _Z_TILT_ADJUST
description: 
gcode:
    {% set dock_after_z_tilt = printer["gcode_macro _User_Variables"].dock_after_z_tilt|default(False) %}

    _KlickyDebug msg="Z_TILT_ADJUST"
    Attach_Probe
    _Z_TILT_ADJUST
    {% if dock_after_z_tilt %}
      Dock_Probe
    {% endif %}


############################################
#             PROBE ACCURACY
############################################
[gcode_macro PROBE_ACCURACY]
rename_existing: _PROBE_ACCURACY
description:Probe Z-height accuracy at current XY position with klicky automount
gcode:
    {% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
    {% set fast_travel_speed = printer["gcode_macro _User_Variables"].fast_travel_speed|default(6000) %}
    {% set max_x = printer.toolhead.axis_maximum.x %}
    {% set max_y = printer.toolhead.axis_maximum.y %}
    {% set samples = params.SAMPLES|default(10)|int %}


    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}
    _KlickyDebug msg="probe_accuracy Axis homed"

    G1 X{ printer.toolhead.axis_maximum.x / 2 - probe_offset_x } Y{ printer.toolhead.axis_maximum.y / 2 - probe_offset_y } F{fast_travel_speed}
    
    # Protect against PROBE_ACCURACY performed from outside the bed
    {% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
          or printer['gcode_move'].position.y < - probe_offset_y
          or printer['gcode_move'].position.x > (max_x - probe_offset_x)
          or printer['gcode_move'].position.x < - probe_offset_x %}
      { action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED!") }
    {% endif%}

    Attach_Probe

    _KlickyDebug msg="probe_accuracy calling klipper probe accuracy"
    _PROBE_ACCURACY SAMPLES={samples}

    #Dock_Probe

############################################
#                 DEBUG
############################################
[gcode_macro _KlickyDebug]
gcode:
    {% set message  = params.MSG %}
    {% set debug = printer.save_variables.variables.debug %}

    {% if debug %}
        { action_respond_info(message) }
    {% endif %}

############################################
#              SENSORLESS
############################################
[gcode_macro SENSORLESS_HOME_Z]
gcode:
    {% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
    {% set fast_travel_speed = printer["gcode_macro _User_Variables"].fast_travel_speed|default(6000) %}
    {% set z_lift_speed = printer["gcode_macro _User_Variables"].z_lift_speed|default(1000) %}
    {% set safe_z = printer["gcode_macro _User_Variables"].safe_z|default(10) %}

    G1 X{ (printer.toolhead.axis_maximum.x + printer.toolhead.axis_minimum.x) / 2 - probe_offset_x } Y{ (printer.toolhead.axis_maximum.y + printer.toolhead.axis_minimum.y) / 2 - probe_offset_y } F{fast_travel_speed}
    #G28 Z
    PROBE
    G1 Z{safe_z*2} F{z_lift_speed}
    #G28 Z
    #G1 Z{safe_z} F{z_lift_speed}

[gcode_macro Z_ENDSTOP]
gcode:
    {% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
    {% set fast_travel_speed = printer["gcode_macro _User_Variables"].fast_travel_speed|default(6000) %}
    {% set z_lift_speed = printer["gcode_macro _User_Variables"].z_lift_speed|default(1000) %}
    {% set safe_z = printer["gcode_macro _User_Variables"].safe_z|default(10) %}

    G1 X-5.2 Y27.5 F{fast_travel_speed}
    G28 Z
    G1 Z{safe_z*2} F{z_lift_speed}

    #G28 Z
    #G1 Z{safe_z} F{z_lift_speed}
[gcode_macro SENSORLESS_DELAY]
gcode:
    # Pause to ensure driver stall flag is clear
    G4 P2000


[gcode_macro M80]
gcode:
  SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
  SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
  SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=1