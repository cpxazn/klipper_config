############################################
#             USER VARIABLES
############################################
[gcode_macro _User_Variables]
# Avoid dock area
variable_safe_x:                  30
variable_safe_y:                  30

# Unusable y to avoid accidentally attaching klicky
# Used in macros/events.cfg START_PRINT macro when purging nozzle
variable_unusable_y:              18

# Lift z to safe height
variable_safe_z:                  10

# Speed Settings
variable_dock_speed:              4000
variable_fast_travel_speed:       13000
variable_normal_travel_speed:     8000
variable_slow_travel_speed:       2000
variable_z_lift_speed:            1200

# Probe Offsets
variable_probe_x_offset:          0
variable_probe_y_offset:          42

# Dock Location
variable_dockmove_x:              2 # Distance from the left (X-min)
variable_dockmove_y:              2 # Distance from the back (Y-max)

# Dock after homing
variable_dock_after_home:         False
variable_dock_after_screws_tilt:  False

gcode: # Don't delete this

############################################
#             HOMING OVERRIDE
############################################
[homing_override]
set_position_z:0
gcode:
  {% set dock_after_home = printer["gcode_macro _User_Variables"].dock_after_home|default(False) %}
  {% set safe_z = printer["gcode_macro _User_Variables"].safe_z|default(10) %}
  {% set z_lift_speed = printer["gcode_macro _User_Variables"].z_lift_speed|default(1000) %}
  M80
  SET_KINEMATIC_POSITION Z=0
  G90
  G1 Z{safe_z} F{z_lift_speed}
  SENSORLESS_HOME_X
  SENSORLESS_HOME_Y
  Attach_Probe
  SENSORLESS_HOME_Z
  {% if dock_after_home %}
    Dock_Probe
  {% endif %}
axes: xy

############################################
#              ATTACH PROBE
############################################
[gcode_macro Attach_Probe]
description: Attaches Klicky Probe
gcode:
    SAVE_GCODE_STATE NAME=Saved_state
    G90
    QUERY_ENDSTOPS
    Attach_Probe_Sub
    QUERY_ENDSTOPS
    Attach_Probe_Verify
    RESTORE_GCODE_STATE NAME=Saved_state
    
[gcode_macro Attach_Probe_Sub]
gcode:
    {% set probe_attached = printer.save_variables.variables.probe_attached %}
    {% set safe_x = printer["gcode_macro _User_Variables"].safe_x|default(30) %}
    {% set safe_y = printer["gcode_macro _User_Variables"].safe_y|default(30) %}
    {% set safe_z = printer["gcode_macro _User_Variables"].safe_z|default(10) %}
    {% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(2) %}
    {% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(2) %}
    {% set dock_speed = printer["gcode_macro _User_Variables"].dock_speed|default(1000) %}
    {% set fast_travel_speed = printer["gcode_macro _User_Variables"].fast_travel_speed|default(6000) %}
    {% set slow_travel_speed = printer["gcode_macro _User_Variables"].slow_travel_speed|default(2000) %}
    {% set z_lift_speed = printer["gcode_macro _User_Variables"].z_lift_speed|default(1000) %}

    # Check if xy homed
    {% if not 'xy' in printer.toolhead.homed_axes %}
      { action_raise_error("Must Home X and Y Axis First!") }
      _KlickyDebug msg="Attach_Probe Axis not homed"
    # NOT probe_attached and query shows TRIGGERED
    {% elif probe_attached == 0 and printer.query_endstops.last_query["z"] %}
      _KlickyDebug msg="Attach_Probe going to attach probe"
      
      # Move up to a safe spot if needed (X,Y)
      {% if printer.toolhead.position.x < safe_x and printer.toolhead.position.y > (printer.toolhead.axis_maximum.y - safe_y) %}
        _KlickyDebug msg="Attach_Probe Moving to safe area"
        G1 Y{printer.toolhead.axis_maximum.y - safe_y} F{slow_travel_speed}
      {% endif %}
      # Lift up to a safe spot if needed (Z)
      {% if printer.toolhead.position.z < safe_z and 'z' in printer.toolhead.homed_axes %}
        G1 Z{safe_z} F{z_lift_speed}
      {% endif %}

      # Move into position before attaching
      _KlickyDebug msg="Attach_Probe Moving into position"
      G1 X{dockmove_x} Y{printer.toolhead.axis_maximum.y - safe_y} F{fast_travel_speed}

      # Move to attach
      _KlickyDebug msg="Attach_Probe Moving to attach"
      G1 Y{printer.toolhead.axis_maximum.y - dockmove_y} F{dock_speed}

      # Back off slowly
      _KlickyDebug msg="Attach_Probe Backing away"
      G1 Y{printer.toolhead.axis_maximum.y - safe_y} F{dock_speed}
    # NOT probe_attached but query shows OPEN
    {% elif probe_attached == 0 and not printer.query_endstops.last_query["z"] %}
        _KlickyDebug msg="Attach_Probe Variable shows not attached, but endstop query shows otherwise"
        { action_raise_error("Variable shows not attached, but endstop query shows otherwise") }
    # probe_attached but query shows TRIGGERED
    {% elif probe_attached == 1 and printer.query_endstops.last_query["z"] %}
        _KlickyDebug msg="Attach_Probe Variable shows not attached, but endstop query shows TRIGGERED"
        { action_raise_error("Variable shows not attached, but endstop query shows TRIGGERED") }
    # probe_attached and query shows OPEN
    {% elif probe_attached == 1 and not printer.query_endstops.last_query["z"] %}
      _KlickyDebug msg="Attach_Probe Already attached"
    {% endif %}
[gcode_macro Attach_Probe_Verify]
gcode:
    # Verify probe got attached
    {% if not printer.query_endstops.last_query["z"] %}
      _KlickyDebug msg="Attach_Probe Successfully attached"
      SAVE_VARIABLE VARIABLE=probe_attached VALUE=1
    {% else %}
      _KlickyDebug msg="Attach_Probe ERROR Endstop status showing triggered after attach"
      { action_raise_error("Endstop status showing triggered after attach") }
    {% endif %}


############################################
#              DOCK PROBE
############################################
[gcode_macro Dock_Probe]
description: Docks Klicky Probe
gcode:
    SAVE_GCODE_STATE NAME=Saved_state
    G90
    QUERY_ENDSTOPS
    Dock_Probe_Sub
    QUERY_ENDSTOPS
    Dock_Probe_Verify
    RESTORE_GCODE_STATE NAME=Saved_state
    
[gcode_macro Dock_Probe_Sub]
description: Docks Klicky Probe
gcode:
    {% set probe_attached = printer.save_variables.variables.probe_attached %}
    {% set safe_x = printer["gcode_macro _User_Variables"].safe_x|default(30) %}
    {% set safe_y = printer["gcode_macro _User_Variables"].safe_y|default(30) %}
    {% set safe_z = printer["gcode_macro _User_Variables"].safe_z|default(10) %}
    {% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(2) %}
    {% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(2) %}
    {% set dock_speed = printer["gcode_macro _User_Variables"].dock_speed|default(1000) %}
    {% set fast_travel_speed = printer["gcode_macro _User_Variables"].fast_travel_speed|default(6000) %}
    {% set slow_travel_speed = printer["gcode_macro _User_Variables"].slow_travel_speed|default(2000) %}
    {% set z_lift_speed = printer["gcode_macro _User_Variables"].z_lift_speed|default(1000) %}

    SAVE_GCODE_STATE NAME=Saved_state
    # Check if xy homed
    {% if not 'xy' in printer.toolhead.homed_axes %}
      { action_raise_error("Must Home X and Y Axis First!") }
      _KlickyDebug msg="Dock_Probe Axis not homed"
    # probe_attached and query shows OPEN
    {% elif probe_attached == 1 and not printer.query_endstops.last_query["z"] %}
      _KlickyDebug msg="Dock_Probe going to dock probe"
      
      # Move up to a safe spot if needed
      {% if printer.toolhead.position.x < safe_x and printer.toolhead.position.y > (printer.toolhead.axis_maximum.y - safe_y) %}
        _KlickyDebug msg="Dock_Probe Moving to safe area"
        G1 Y{printer.toolhead.axis_maximum.y - safe_y} F{slow_travel_speed}
      {% endif %}
      # Lift up to a safe spot if needed (Z)
      {% if printer.toolhead.position.z < safe_z and 'z' in printer.toolhead.homed_axes %}
        G1 Z{safe_z} F{z_lift_speed}
      {% endif %}

      # Move into position before attaching
      _KlickyDebug msg="Dock_Probe Moving into position"
      G1 X{dockmove_x} Y{printer.toolhead.axis_maximum.y - safe_y} F{fast_travel_speed}

      # Move to dock
      _KlickyDebug msg="Dock_Probe Moving to attach"
      G1 Y{printer.toolhead.axis_maximum.y - dockmove_y} F{dock_speed}

      # Swipe off
      _KlickyDebug msg="Dock_Probe Swipe off"
      G1 X{printer.toolhead.axis_maximum.x / 2} F{dock_speed * 2}

    # probe_attached but query shows TRIGGERED
    {% elif probe_attached == 1 and printer.query_endstops.last_query["z"] %}
        _KlickyDebug msg="Dock_Probe Variable shows attached, but endstop query shows otherwise"
        { action_raise_error("Variable shows attached, but endstop query shows otherwise") }
    # NOT probe_attached but query shows OPEN
    {% elif probe_attached == 0 and not printer.query_endstops.last_query["z"] %}
        _KlickyDebug msg="Dock_Probe Variable shows not attached, but endstop query shows OPEN"
        { action_raise_error("Variable shows not attached, but endstop query shows OPEN") }
    # NOT probe_attached and query shows TRIGGERED
    {% elif probe_attached == 0 and printer.query_endstops.last_query["z"] %}
      _KlickyDebug msg="Dock_Probe Already docked"
    {% endif %}
    RESTORE_GCODE_STATE NAME=Saved_state

[gcode_macro Dock_Probe_Verify]
gcode:
    # Verify probe got docked
    {% if printer.query_endstops.last_query["z"] %}
      _KlickyDebug msg="Dock_Probe Successfully docked"
      SAVE_VARIABLE VARIABLE=probe_attached VALUE=0
    {% else %}
      _KlickyDebug msg="Dock_Probe ERROR Endstop status showing open after dock"
      { action_raise_error("Endstop status showing open after dock") }
    {% endif %}

############################################
#              BED MESH
############################################
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
description: Perform Mesh Bed Leveling with klicky
gcode:
    _KlickyDebug msg="BED_MESH_CALIBRATE"
	  G90
    Attach_Probe
    _BED_MESH_CALIBRATE 
    Dock_Probe

############################################
#             SCREWS TILT
############################################
[gcode_macro SCREWS_TILT_CALCULATE]
rename_existing: _SCREWS_TILT_CALCULATE
description: 
gcode:
    {% set dock_after_screws_tilt = printer["gcode_macro _User_Variables"].dock_after_screws_tilt|default(False) %}

    _KlickyDebug msg="SCREWS_TILT_CALCULATE"
    Attach_Probe
    _SCREWS_TILT_CALCULATE
    {% if dock_after_screws_tilt %}
      Dock_Probe
    {% endif %}

############################################
#                 DEBUG
############################################
[gcode_macro _KlickyDebug]
gcode:
    {% set message  = params.MSG %}
    {% set debug = printer.save_variables.variables.debug %}

    {% if debug %}
        { action_respond_info(message) }
    {% endif %}

############################################
#              SENSORLESS
############################################
[gcode_macro SENSORLESS_HOME_X]
gcode:
    {% set slow_travel_speed = printer["gcode_macro _User_Variables"].slow_travel_speed|default(2000) %}
    SENSORLESS_DELAY
    G28 X
    G1 X{ printer.toolhead.axis_maximum.x - 8 } F{slow_travel_speed}

[gcode_macro SENSORLESS_HOME_Y]
gcode:
    {% set safe_y = printer["gcode_macro _User_Variables"].safe_y|default(30) %}
    {% set normal_travel_speed = printer["gcode_macro _User_Variables"].normal_travel_speed|default(5000) %}
    SENSORLESS_DELAY
    G28 Y
    G1 Y{ printer.toolhead.axis_maximum.y - safe_y } F{normal_travel_speed}

[gcode_macro SENSORLESS_HOME_Z]
gcode:
    {% set probe_x_offset = printer["gcode_macro _User_Variables"].probe_x_offset|default(0) %}
    {% set probe_y_offset = printer["gcode_macro _User_Variables"].probe_y_offset|default(42) %}
    {% set fast_travel_speed = printer["gcode_macro _User_Variables"].fast_travel_speed|default(6000) %}
    {% set z_lift_speed = printer["gcode_macro _User_Variables"].z_lift_speed|default(1000) %}
    {% set safe_z = printer["gcode_macro _User_Variables"].safe_z|default(10) %}

    G1 X{ printer.toolhead.axis_maximum.x / 2 - probe_x_offset } Y{ printer.toolhead.axis_maximum.y / 2 - probe_y_offset } F{fast_travel_speed}
    G28 Z
    G1 Z{safe_z} F{z_lift_speed}
    G28 Z
    G1 Z{safe_z} F{z_lift_speed}

[gcode_macro SENSORLESS_DELAY]
gcode:
    # Pause to ensure driver stall flag is clear
    G4 P2300


[gcode_macro M80]
gcode:
  SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
  SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
  SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=1